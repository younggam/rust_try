use ash;
use ash::vk;
use std::ffi::CString;

pub struct RustTry {
    entry: ash::Entry,
    instance: ash::Instance,
    physical_device: vk::PhysicalDevice,
    queue_family_index: u32,
    device: ash::Device,
}

impl RustTry {
    pub fn new() -> RustTry {
        let entry = unsafe { ash::Entry::new().expect("Vulkan functions loading error") };
        let instance = Self::create_instance(&entry);
        let physical_device = Self::create_physical_device(&instance);
        let queue_family_index = Self::find_queue_family_index(&instance, &physical_device);
        let device = Self::create_device(&instance, &queue_family_index, &physical_device);

        RustTry {
            entry,
            instance,
            physical_device,
            queue_family_index,
            device,
        }
    }

    pub fn print_memory_properties(&self) {
        let properties = unsafe {
            self.instance
                .get_physical_device_memory_properties(self.physical_device)
        };

        for (i, memory_type) in properties.memory_types.iter().enumerate() {
            let heap_index = memory_type.heap_index;
            println!("{:#?}", memory_type);
            println!("size : {:#?}", properties.memory_heaps[heap_index as usize].size);
        }
    }

    fn create_instance(entry: &ash::Entry) -> ash::Instance {
        let layer_names = [CString::new("VK_LAYER_KHRONOS_validation").unwrap()];
        let layer_names_raw: Vec<*const i8> = layer_names
            .iter()
            .map(|raw_name| raw_name.as_ptr())
            .collect();

        let instance_create_info = vk::InstanceCreateInfo::builder()
            .enabled_layer_names(&layer_names_raw)
            .build();

        match unsafe { entry.create_instance(&instance_create_info, None) } {
            Ok(instance) => instance,
            Err(instance_error) => {
                match instance_error {
                    ash::InstanceError::LoadError(errors) => {
                        errors.iter().for_each(|e| println!("{}", e.to_string()))
                    }
                    ash::InstanceError::VkError(e) => match e {
                        vk::Result::ERROR_OUT_OF_HOST_MEMORY => println!("{}", e.to_string()),
                        vk::Result::ERROR_OUT_OF_DEVICE_MEMORY => println!("{}", e.to_string()),
                        vk::Result::ERROR_INITIALIZATION_FAILED => println!("{}", e.to_string()),
                        vk::Result::ERROR_LAYER_NOT_PRESENT => println!("{}", e.to_string()),
                        vk::Result::ERROR_INCOMPATIBLE_DRIVER => println!("{}", e.to_string()),
                        _ => {}
                    },
                };
                panic!("Instance creation error");
            }
        }
    }

    fn create_physical_device(instance: &ash::Instance) -> vk::PhysicalDevice {
        let physical_devices = unsafe {
            instance
                .enumerate_physical_devices()
                .expect("Physical device error")
        };

        physical_devices[0]
    }

    fn find_queue_family_index(
        instance: &ash::Instance,
        physical_device: &vk::PhysicalDevice,
    ) -> u32 {
        let queue_family_properties =
            unsafe { instance.get_physical_device_queue_family_properties(*physical_device) };

        let mut result = usize::MAX;

        for (i, property) in queue_family_properties.iter().enumerate() {
            if property.queue_count > 0 && property.queue_flags.contains(vk::QueueFlags::GRAPHICS) {
                result = i;
                break;
            }
        }
        assert_ne!(result, usize::MAX);
        result as u32
    }

    fn create_device(
        instance: &ash::Instance,
        queue_family_index: &u32,
        physical_device: &vk::PhysicalDevice,
    ) -> ash::Device {
        let priority: f32 = 1.0;

        let queue_create_info = vk::DeviceQueueCreateInfo::builder()
            .queue_family_index(*queue_family_index)
            .queue_priorities(&[priority])
            .build();

        let device_create_info = vk::DeviceCreateInfo::builder()
            .queue_create_infos(&[queue_create_info])
            .build();

        match unsafe { instance.create_device(*physical_device, &device_create_info, None) } {
            Ok(device) => device,
            Err(e) => {
                match e {
                    vk::Result::ERROR_OUT_OF_HOST_MEMORY => println!("{}", e.to_string()),
                    vk::Result::ERROR_OUT_OF_DEVICE_MEMORY => println!("{}", e.to_string()),
                    vk::Result::ERROR_INITIALIZATION_FAILED => println!("{}", e.to_string()),
                    vk::Result::ERROR_EXTENSION_NOT_PRESENT => println!("{}", e.to_string()),
                    vk::Result::ERROR_FEATURE_NOT_PRESENT => println!("{}", e.to_string()),
                    vk::Result::ERROR_TOO_MANY_OBJECTS => println!("{}", e.to_string()),
                    vk::Result::ERROR_DEVICE_LOST => println!("{}", e.to_string()),
                    _ => {}
                };
                panic!("Device creation error");
            }
        }
    }
}

impl Drop for RustTry {
    fn drop(&mut self) {
        unsafe {
            self.device.destroy_device(None);
            self.instance.destroy_instance(None);
        }
    }
}
